module.exports = {
    parser: '@typescript-eslint/parser',
    plugins: ['@typescript-eslint', 'import', 'prettier'],
    env: {
        browser: true,
        jest: true,
    },
    extends: [
        'eslint:recommended',
        'plugin:compat/recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:prettier/recommended',
        'plugin:import/errors',
        'plugin:import/typescript',
        'prettier',
    ],
    parserOptions: {
		tsconfigRootDir: __dirname,
        project: './tsconfig.json',
        ecmaVersion: 2020,
        sourceType: 'module',
    },
    rules: {
		'quotes': ['error', 'single'],
		'no-param-reassign': 'error',
		'no-plusplus': 'off',
		'no-shadow': 'off',
		'no-use-before-define': 'error',
		'no-constant-condition': 'off',
		'import/no-duplicates': 'error',
		'import/no-cycle': 'error',
		'import/no-extraneous-dependencies': 'error',
		'import/no-unused-modules': 'off',
        '@typescript-eslint/ban-types': 'off',
        '@typescript-eslint/no-shadow': 'error',
        '@typescript-eslint/no-use-before-define': 'error',
        '@typescript-eslint/no-unused-vars': 'error',
        '@typescript-eslint/no-useless-constructor': 'error',
		'@typescript-eslint/explicit-module-boundary-types': 'off',
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/explicit-module-boundary-type': 'off',
        '@typescript-eslint/ban-ts-comment': 'off',
        '@typescript-eslint/naming-convention': [
			'error',
			{
				selector: 'variable',
				format: ['UPPER_CASE', 'camelCase'],
				types: ['boolean', 'number', 'string'],
			},
			{
				selector: 'variable',
				format: ['camelCase'],
				types: ['function'],
			},
			{
				selector: 'interface',
				format: ['PascalCase'],
				custom: {
					regex: '^I[A-Z]',
					match: false,
				},
			},
		],
        'comma-dangle': ['error', 'always-multiline'],
		'arrow-body-style': ['error', 'as-needed'],
    },
	globals: {
		describe: true,
		it: true,
		jest: true,
		beforeEach: true,
		beforeAll: true,
		afterEach: true,
		expect: true,
		afterAll: true,
	},
};
